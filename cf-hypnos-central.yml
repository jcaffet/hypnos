---
AWSTemplateFormatVersion: '2010-09-09'
Description: Stack managing begin and end of business hours instance actions

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Lambda settings'
        Parameters: ['LambdaS3Bucket', 'LambdaS3Prefix']
      - Label:
          default: 'Cloudwatch event rules'
        Parameters: ['CronBeginBusinessHours', 'CronEndBusinessHours']

Parameters:

  Environment:
    Description: Environment where Hypnos is installed
    Type: String
    Default: prod
    AllowedValues:
    - dev
    - staging
    - prod

  ChildAccountRole:
    Description: Child AWS account ID
    Type: String
    Default: hypnos-manage-instances
    ConstraintDescription: Must be a valid AWS account ID

  TagApp:
    Description: Tag application
    Type: String
    Default: hypnos
  TagComp:
    Description: Tag composants
    Type: String
    Default: application

  LambdaS3Bucket:
    Description: Application Bucket
    Type: String
  LambdaS3Prefix:
    Description: Application Prefix
    Type: String
    Default: sources

  CronBeginBusinessHours:
    Description: Hour to wake up infrastructure
    Type: String
    Default: "cron(0 6 ? * MON-FRI *)"
  CronEndBusinessHours:
    Description: Hour to stop infrastructure
    Type: String
    Default: "cron(0 21 ? * MON-FRI *)"


Resources:

  HypnosLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: hypnos-lambda-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: instances-management-allow
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "sts:AssumeRole"
            Resource:
            - !Sub 'arn:aws:iam::*:role/${ChildAccountRole}'
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource:
            - "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            - autoscaling:DescribeAutoScalingGroups
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - ec2:TerminateInstances
            Resource:
            - "arn:aws:ec2:*:*:instance/*"
          - Effect: Allow
            Action:
            - autoscaling:ResumeProcesses
            - autoscaling:SetDesiredCapacity
            - autoscaling:UpdateAutoScalingGroup
            - autoscaling:SuspendProcesses
            Resource:
            - !Sub 'arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/*'

  HypnosLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub '/aws/lambda/${TagApp}-${Environment}' 
      RetentionInDays: 30

  HypnosLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        S3Bucket: !Sub '${LambdaS3Bucket}'
        S3Key: !Sub '${LambdaS3Prefix}/hypnos-stop-instances.py.zip'
      Description: "Manage instance during non business hours"
      FunctionName: !Sub '${TagApp}-${Environment}'
      Handler: "hypnos-stop-instances.lambda_handler"
      MemorySize: 128
      Role: !Sub ${HypnosLambdaRole.Arn}
      Runtime: "python3.6"
      Timeout: 60
      Tags:
      - Key: Env
        Value: !Ref Environment
      - Key: Comp
        Value: !Ref TagComp
      - Key: App
        Value: !Ref TagApp

  HypnosWrapperLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: hypnos-wrapper-access
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: invoke-lambda-allow
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - lambda:InvokeFunction
            Resource:
            - !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:${TagApp}-*"
      - PolicyName: cloudwatch-logs-allow
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - logs:PutLogEvents
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource:
            - "arn:aws:logs:*:*:*"
      - PolicyName: accessConfigBucketPolicy
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "s3:ListBucket"
            - "s3:GetObject"
            Resource:
            - !Sub "arn:aws:s3:::${LambdaS3Bucket}"
            - !Sub "arn:aws:s3:::${LambdaS3Bucket}/*"

  HypnosWrapperLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub '${LambdaS3Bucket}'
        S3Key: !Sub '${LambdaS3Prefix}/hypnos-wrapper.py.zip'
      Description: "Launch all the child Lambda by account"
      FunctionName: !Sub '${TagApp}-wrapper-${Environment}'
      Handler: "hypnos-wrapper.lambda_handler"
      MemorySize: 128
      Role: !Sub ${HypnosWrapperLambdaRole.Arn}
      Runtime: "python3.6"
      Timeout: 60
      Environment:
        Variables:
          LAMBDA_TO_CALL: !Sub '${HypnosLambda}'
          ROLE_TO_ASSUME: "hypnos-manage-instances"
          CONFIGFILE_BUCKET: !Sub '${LambdaS3Bucket}'
          CONFIGFILE_NAME: "config/accounts.list"
      Tags:
      - Key: Env
        Value: !Ref Environment
      - Key: Comp
        Value: !Ref TagComp
      - Key: App
        Value: !Ref TagApp

  EndOfBusinessHoursEventRule:
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "Start of non-business hours actions"
      Name: !Sub '${TagApp}-start-nonbusinesshours-${Environment}'
      ScheduleExpression: !Ref CronEndBusinessHours
      State: "ENABLED"
      Targets:
      - Arn: !Sub ${HypnosWrapperLambda.Arn}
        Id: EndOfBusinessHoursEventRule
        Input : '{ "action": "stop" }'

  PermissionForEndBusinessHoursToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref HypnosWrapperLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub ${EndOfBusinessHoursEventRule.Arn}

  BeginOfBusinessHoursEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "End of non-business hours actions"
      Name: !Sub '${TagApp}-end-nonbusinesshours-${Environment}'
      ScheduleExpression: !Ref CronBeginBusinessHours
      State: "ENABLED"
      Targets:
      - Arn: !Sub ${HypnosWrapperLambda.Arn}
        Id: BeginOfBusinessHoursEventRule
        Input : '{ "action": "start" }'

  PermissionForBeginBusinessHoursToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref HypnosWrapperLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub ${BeginOfBusinessHoursEventRule.Arn}

