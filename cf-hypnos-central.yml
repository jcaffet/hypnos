---
AWSTemplateFormatVersion: '2010-09-09'
Description: Stack managing begin and end of business hours instance actions

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Child Accounts'
        Parameters: ['RecProdAccount', 'DevAccount', 'CorpAccount']
      - Label:
          default: 'Lambda settings'
        Parameters: ['LambdaS3Bucket', 'LambdaS3Prefix']
      - Label:
          default: 'Cloudwatch event rules'
        Parameters: ['CronBeginBusinessHours', 'CronEndBusinessHours']

Parameters:

  Environment:
    Description: Environment where Hypnos is installed
    Type: String
    Default: corp
    AllowedValues:
    - dev
    - rec
    - prod
    - corp
  RecProdAccount:
    Description: Production and recette AWS account ID
    Type: String
    Default: 395174950964
    ConstraintDescription: Must be a valid AWS account ID
  DevAccount:
    Description: Developmement AWS account ID
    Type: String
    Default: 629307289374
    ConstraintDescription: Must be a valid AWS account ID
  CorpAccount:
    Description: Corporate AWS account ID
    Type: String
    Default: 724130552230 
    ConstraintDescription: Must be a valid AWS account ID

  ChildAccountRole:
    Description: Developmement AWS account ID
    Type: String
    Default: hypnos-manage-instances
    ConstraintDescription: Must be a valid AWS account ID

  TagBloc:
    Description: Tag bloc metier
    Type: String
    Default: operations
  TagApp:
    Description: Tag application
    Type: String
    Default: hypnos
  TagComp:
    Description: Tag composants
    Type: String
    Default: application
  LambdaS3Bucket:
    Description: Application Bucket
    Type: String
    Default: operations-services-corp
  LambdaS3Prefix:
    Description: Application Prefix
    Type: String
    Default: hypnos
  CronBeginBusinessHours:
    Description: Hour to wake up infrastructure
    Type: String
    Default: "cron(0 7 ? * MON-FRI *)"
  CronEndBusinessHours:
    Description: Hour to stop infrastructure
    Type: String
    Default: "cron(0 19 ? * MON-FRI *)"


Resources:

  HypnosLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: operations-hypnos-access
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: instances-management-allow
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "sts:AssumeRole"
            Resource:
            - !Sub 'arn:aws:iam::${DevAccount}:role/${ChildAccountRole}'
            - !Sub 'arn:aws:iam::${RecProdAccount}:role/${ChildAccountRole}'
            - !Sub 'arn:aws:iam::${CorpAccount}:role/${ChildAccountRole}'
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource:
            - "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            - autoscaling:DescribeAutoScalingGroups
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - ec2:TerminateInstances
            Resource:
            - "arn:aws:ec2:*:*:instance/*"
          - Effect: Allow
            Action:
            - autoscaling:ResumeProcesses
            - autoscaling:SetDesiredCapacity
            - autoscaling:UpdateAutoScalingGroup
            - autoscaling:SuspendProcesses
            Resource:
            - !Sub 'arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/*'

  HypnosLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub '/aws/lambda/${TagBloc}-${TagApp}-${Environment}' 
      RetentionInDays: 30

  HypnosLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        S3Bucket: !Sub '${LambdaS3Bucket}'
        S3Key: !Sub '${LambdaS3Prefix}/hypnos-terminate.py.zip'
      Description: "Manage instance during non business hours"
      FunctionName: !Sub '${TagBloc}-${TagApp}-${Environment}'
      Handler: "hypnos-terminate.lambda_handler"
      MemorySize: 128
      Role: !Sub ${HypnosLambdaRole.Arn}
      Runtime: "python3.6"
      Timeout: 60
      Tags:
      - Key: Env
        Value: !Ref Environment
      - Key: Bloc
        Value: !Ref TagBloc
      - Key: Comp
        Value: !Ref TagComp
      - Key: App
        Value: !Ref TagApp

  EndOfBusinessHoursEventRule:
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "Start of non-business hours actions"
      Name: !Sub '${TagBloc}-${TagApp}-start-nonbusinesshours-${Environment}'
      ScheduleExpression: !Ref CronEndBusinessHours
      State: "ENABLED"
      Targets:
      - Arn: !Sub ${HypnosLambda.Arn}
        Id: EndOfBusinessHoursEventRule-CorpAccount
        Input : !Sub '{ "action": "stop", "role_arn": "arn:aws:iam::${CorpAccount}:role/${ChildAccountRole}" }'
      - Arn: !Sub ${HypnosLambda.Arn}
        Id: EndOfBusinessHoursEventRule-DevAccount
        Input : !Sub '{ "action": "stop", "role_arn": "arn:aws:iam::${DevAccount}:role/${ChildAccountRole}" }'
      - Arn: !Sub ${HypnosLambda.Arn}
        Id: EndOfBusinessHoursEventRule-RecProdAccount
        Input : !Sub '{ "action": "stop", "role_arn": "arn:aws:iam::${RecProdAccount}:role/${ChildAccountRole}" }'


  PermissionForEndBusinessHoursToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref HypnosLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub ${EndOfBusinessHoursEventRule.Arn}

  BeginOfBusinessHoursEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "End of non-business hours actions"
      Name: !Sub '${TagBloc}-${TagApp}-end-nonbusinesshours-${Environment}'
      ScheduleExpression: !Ref CronBeginBusinessHours
      State: "ENABLED"
      Targets:
      - Arn: !Sub ${HypnosLambda.Arn}
        Id: BeginOfBusinessHoursEventRule-CorpAccount
        Input : !Sub '{ "action": "start", "role_arn": "arn:aws:iam::${CorpAccount}:role/${ChildAccountRole}" }'
      - Arn: !Sub ${HypnosLambda.Arn}
        Id: BeginOfBusinessHoursEventRule-DevAccount
        Input : !Sub '{ "action": "start", "role_arn": "arn:aws:iam::${DevAccount}:role/${ChildAccountRole}" }'
      - Arn: !Sub ${HypnosLambda.Arn}
        Id: BeginOfBusinessHoursEventRule-RecProdAccount
        Input : !Sub '{ "action": "start", "role_arn": "arn:aws:iam::${RecProdAccount}:role/${ChildAccountRole}" }'

  PermissionForBeginBusinessHoursToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref HypnosLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub ${BeginOfBusinessHoursEventRule.Arn}

