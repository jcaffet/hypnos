---
AWSTemplateFormatVersion: '2010-09-09'
Description: Stack managing begin and end of business hours instance actions

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Lambda settings'
        Parameters: ['LambdaS3Bucket', 'LambdaSourcesS3Prefix']
      - Label:
          default: 'Hypnos launch frequency'
        Parameters: ['CronTriggerLambda']
      - Label:
          default: 'Access to the spoke accounts'
        Parameters: ['HypnosManageRole', 'HypnosManageRoleExternalId']

Parameters:

  HypnosManageRole:
    Description: Hypnos role name in spoke accounts
    Type: String
    Default: hypnos-manage-instances

  HypnosManageRoleExternalId:
    Description: Hitman Role External ID
    Type: String

  TagApp:
    Description: Tag application
    Type: String
    Default: hypnos

  TagBlock:
    Description: Tag Block
    Type: String
    Default: sharedservices

  TagOrg:
    Description: Organization tag
    Type: String
    Default: cloudteam

  LambdaS3Bucket:
    Description: Application Bucket
    Type: String

  LambdaSourcesS3Prefix:
    Description: Application Prefix
    Type: String
    Default: sources

  CronTriggerLambda:
    Description: Hour to wake up infrastructure
    Type: String
    Default: "cron(0 * ? * MON-FRI *)"

Resources:

  HypnosAccountsConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: hypnos-accounts-config
      AttributeDefinitions:
      - AttributeName: 'accountId'
        AttributeType: 'S'
      KeySchema:
      - AttributeName: 'accountId'
        KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      Tags:
      - Key: Block
        Value: !Ref TagBlock
      - Key: App
        Value: !Ref TagApp
      - Key: Org
        Value: !Ref TagOrg

  HypnosCentralLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: hypnos-central-lambda-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: write-cloudwatch-logs-allow
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource:
            - "arn:aws:logs:*:*:*"
      - PolicyName: assume-hypnos-child-role-allow
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "sts:AssumeRole"
            Resource:
            - !Sub 'arn:aws:iam::*:role/${HypnosManageRole}'

  HypnosCentralLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HypnosCentralLambda}'
      RetentionInDays: 30

  HypnosCentralLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub '${LambdaS3Bucket}'
        S3Key: !Sub '${LambdaSourcesS3Prefix}/hypnos-central.py.zip'
      Description: "Manage instance during non business hours"
      FunctionName: !Sub '${TagApp}-central'
      Handler: "hypnos-central.lambda_handler"
      MemorySize: 128
      Role: !GetAtt HypnosCentralLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          HYPNOS_MANAGE_ROLE: !Ref HypnosManageRole
          HYPNOS_MANAGE_ROLE_EXTERNALID: !Ref HypnosManageRoleExternalId
      Tags:
      - Key: Block
        Value: !Ref TagBlock
      - Key: App
        Value: !Ref TagApp
      - Key: Org
        Value: !Ref TagOrg

  HypnosLauncherLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: hypnos-launcher-lambda-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: invoke-hypnos-central-lambda-allow
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - lambda:InvokeFunction
            Resource:
            - !GetAtt HypnosCentralLambda.Arn
      - PolicyName: write-cloudwatch-logs-allow
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - logs:PutLogEvents
            - logs:CreateLogGroup
            - logs:CreateLogStream
            Resource:
            - "arn:aws:logs:*:*:*"
      - PolicyName: scan-dynamo-accounts-config-allow
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "dynamodb:scan"
            Resource:
            - !GetAtt HypnosAccountsConfigTable.Arn
      - PolicyName: describe-regions-allow
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "ec2:DescribeRegions"
            Resource:
            - "*"

  HypnosLauncherLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HypnosLauncherLambda}'
      RetentionInDays: 30

  HypnosLauncherLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub '${LambdaS3Bucket}'
        S3Key: !Sub '${LambdaSourcesS3Prefix}/hypnos-launcher.py.zip'
      Description: "Launch all the child Lambda by account"
      FunctionName: !Sub '${TagApp}-launcher'
      Handler: "hypnos-launcher.lambda_handler"
      MemorySize: 128
      Role: !GetAtt HypnosLauncherLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          LAMBDA_TO_CALL: !Ref HypnosCentralLambda
          ACCOUNTSCONFIG_TABLE: !Ref HypnosAccountsConfigTable
      Tags:
      - Key: Block
        Value: !Ref TagBlock
      - Key: App
        Value: !Ref TagApp
      - Key: Org
        Value: !Ref TagOrg

  TriggerLauncherLambdaEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Periodicaly invokes lambda launcher for Hypnos"
      Name: !Sub '${TagApp}-invoke-lambda'
      ScheduleExpression: !Ref CronTriggerLambda
      State: "ENABLED"
      Targets:
      - Arn: !GetAtt HypnosLauncherLambda.Arn
        Id: TriggerLauncherLambdaEventRule
        Input : '{ "mode": "run" }'

  PermissionTriggerLauncherLambdaEventRuleToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref HypnosLauncherLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt TriggerLauncherLambdaEventRule.Arn
